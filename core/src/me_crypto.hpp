/*
me_crypto.hpp
A Collection of basic cryptography functions for use with the main library

Copyright (C) 2023 Ian Sloat

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

#ifdef MECRYPTO_EXPORTS

#define MECRYPTO __declspec(dllexport)

#else

#define MECRYPTO __declspec(dllimport)

#endif

#include <vector>
#include <istream>

#ifndef ME_CRYPTO_HPP
#define ME_CRYPTO_HPP

namespace me {
	namespace crypto {

		/**
		* @class SHA1Hash
		* @brief A class to represent a SHA1 hash
		*/
		class MECRYPTO SHA1Hash {
		public:
			/**
			* @brief Constructs a SHA1Hash object from the provided hash values
			* @param h0 The first 32 bits of the hash
			* @param h1 The second 32 bits of the hash
			* @param h2 The third 32 bits of the hash
			* @param h3 The fourth 32 bits of the hash
			* @param h4 The fifth 32 bits of the hash
			*/
			SHA1Hash(uint32_t h0, uint32_t h1, uint32_t h2, uint32_t h3, uint32_t h4);

			/**
			* @brief Returns the first 32 bits of the hash
			*/
			uint32_t get_h0() const;

			/**
			* @brief Returns the second 32 bits of the hash
			*/
			uint32_t get_h1() const;

			/**
			* @brief Returns the third 32 bits of the hash
			*/
			uint32_t get_h2() const;

			/**
			* @brief Returns the fourth 32 bits of the hash
			*/
			uint32_t get_h3() const;

			/**
			* @brief Returns the fifth 32 bits of the hash
			*/
			uint32_t get_h4() const;

			/**
			* @brief Returns the hash as a string of hexadecimal characters
			*/
			std::string to_string() const;

			/**
			* @brief Returns the hash as a byte array
			*/
			const uint8_t* to_bytes() const;
		private:
			uint32_t h0;
			uint32_t h1;
			uint32_t h2;
			uint32_t h3;
			uint32_t h4;
			uint8_t bytes[20];
		};

		/**
		* @brief Generates a parity file using a vector of file paths as input. Used to create a basic representation of a file group.
		*
		* @remarks
		* The parity file is generated by XORing the bytes of the input files together. The parity file is the same size as the largest input file.
		*
		* @param std::vector<std::string> input A vector of file paths to be used as input
		* @param std::string destination The path to the parity file to be created
		*/
		MECRYPTO void createParityFile(const std::vector<std::string>& input, const std::string destination);

		/**
		* @brief Hashes all available data in an input stream using SHA1
		*
		* @remarks
		* Uses the SHA1 algorithm to hash all available data in an input stream.
		* The input stream is not closed after the function is called.
		*
		* @param std::istream& in The input stream to hash
		* @return SHA1Hash The SHA1 hash of the input stream
		*/
		MECRYPTO const SHA1Hash hashStreamSHA1(std::istream& in);

		/**
		* @brief Hashes a stream using HMAC-SHA1
		*
		* @remarks
		* The key stream is hashed first, then the input stream is hashed, then the two hashes are concatenated and hashed again.
		*
		* @param std::istream& in The input stream
		* @param std::istream& key The key stream
		* @return SHA1Hash The HMAC-SHA1 hash of the input stream
		*/
		MECRYPTO const SHA1Hash StreamToHMAC_SHA1(std::istream& in, std::istream& key);

		/**
		* @brief Generates a SHA1PRNG key from a seed
		*
		* @remarks
		* The SHA1PRNG algorithm is defined in the Java Cryptography Architecture Standard Algorithm Name Documentation
		* https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html#SecureRandom
		* It is not designed to be cryptographically secure, and should not be used for such purposes.
		* In the context of MotionEngine, it is commonly used to generate build keys.
		*
		* @param std::ostream& out The output stream to write the key to
		* @param std::istream& init The input stream to use as the seed
		*/
		MECRYPTO void generateSHA1PRNGKey(std::ostream& out, std::istream& init);

	}
}

extern "C" {
	MECRYPTO extern unsigned char keyfile_bin[1000];
	MECRYPTO extern unsigned int keyfile_bin_len;
}
#endif